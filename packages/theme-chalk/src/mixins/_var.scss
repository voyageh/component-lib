@use "sass:map";

@use "function" as *;
@use "../common/var" as *;

// @include set-component-css-var("border-color", $border-color);
// 假设 $border-color为("": #dcdfe6, "light": #e4e7ed)
// 将会得到 --ul-border-color: #dcdfe6; --ul-border-color-light: #e4e7ed;
@mixin set-component-css-var($name, $variables) {
  @each $attribute, $value in $variables {
    @if $attribute == "default" {
      #{getCssVarName($name)}: #{$value};
    } @else {
      #{getCssVarName($name, $attribute)}: #{$value};
    }
  }
}

// generate css var from existing css var
// for example:
// @include css-var-from-global(('button', 'text-color'), ('color', $type))
// --el-button-text-color: var(--el-color-#{$type});
@mixin css-var-from-global($var, $gVar) {
  $varName: joinVarName($var);
  $gVarName: joinVarName($gVar);
  #{$varName}: var(#{$gVarName});
}

// set css var value, because we need translate value to string
// for example:
// @include set-css-var-value(('color', 'primary'), red);
// --el-color-primary: red;
@mixin set-css-var-value($name, $value) {
  #{joinVarName($name)}: #{$value};
}

@mixin set-css-color-type($type) {
  @include set-css-var-value(("color", $type), map.get($colors, $type, "base"));

  @each $i in (3, 5, 7, 8, 9) {
    @include set-css-var-value(("color", $type, "light", $i), map.get($colors, $type, "light-#{$i}"));
  }

  @include set-css-var-value(("color", $type, "dark-2"), map.get($colors, $type, "dark-2"));
}

// @include set-css-color-rgb('primary');
// --ul-color-primary-rgb: red, green, blue;
@mixin set-css-color-rgb($type) {
  $color: map.get($colors, $type, "base");
  @include set-css-var-value(("color", $type, "rgb"), #{red($color), green($color), blue($color)});
}
